<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一个项目</title>
      <link href="/2022/02/09/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/02/09/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>学生成绩统计软件(C语言编写)</p><h2 id="功能要求"><a href="#功能要求" class="headerlink" title="功能要求"></a>功能要求</h2><p>1.每条记录由学号、姓名、若干门课程的成绩组成；<br>2.能计算每个学生的总分和平均分并显示；<br>3.能按平均分统计各分数段的人数，并以分布图显示，如右图所示。<br>4.在此基础上，可进行文件操作。</p><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><p>本设计包括菜单、合法性验证、录入信息、分数计算、输出成绩统计图表、图表存入文件和主函数等几个模块组成。</p><h3 id="全局变量、结构体的定义"><a href="#全局变量、结构体的定义" class="headerlink" title="全局变量、结构体的定义"></a>全局变量、结构体的定义</h3><p>i.全局变量<br>STUDENT *p1;                 &#x2F;&#x2F;结构体指针<br>int *p2;                     &#x2F;&#x2F;int型指针<br>int numofstudent;            &#x2F;&#x2F;学生人数<br>int numofcourse;             &#x2F;&#x2F;课程数量</p><p>ii.结构体的定义<br>    typedef struct student<br>{<br>    int num;<br>    char name[20];<br>    int score[10];<br>}STUDENT;<br>p1&#x3D;(STUDENT *)calloc(numofstudent,sizeof(STUDENT));<br>p2&#x3D;(int *)calloc(numofstudent,sizeof(int));<br>&#x2F;&#x2F;动态分配结构体内存、数组内存。<br>ps. calloc函数一般调用形式(类型说明符 *)calloc(n,size)<br>类型说明符为强制类型转换，n和size的作用是在内存动态存储区域中分配n块长度为size字节的连续存储区域，函数返回一个指向分配起始地址的指针。与malloc相比，calloc在动态分配完内存后，自动初始化内存空间为零。</p><h3 id="各模块介绍"><a href="#各模块介绍" class="headerlink" title="各模块介绍"></a>各模块介绍</h3><h4 id="合法性检验数据模块"><a href="#合法性检验数据模块" class="headerlink" title="合法性检验数据模块"></a>合法性检验数据模块</h4><p>利用scanf函数的返回值， 自定义check函数使输入的数据合法，函数返回输入的合法数据。while(getchar()!&#x3D;’\n’);消除换行符。<br>scanf返回值有三种情况:<br>1．正整数,表示正确输入参数的个数。<br>2. 0，表示输入不匹配<br>3. EOF，表示输入流已经结束<br>自定义choice函数在菜单界面只能输入0或1，避免程序在接受其他数据时候出现bug。<br>while(a!&#x3D;1&amp;&amp;a!&#x3D;0)当a除0或1时进入循环。<br>while(getchar()!&#x3D;’\n’);消除换行符。<br>    代码如下：<br>int check()                  &#x2F;&#x2F;合法性验证<br>{<br>    int a,b;<br>    a&#x3D;scanf(“%d”,&amp;b);        &#x2F;&#x2F;合法输入返回值为1<br>    while(a!&#x3D;1)<br>    {<br>        while(getchar()!&#x3D;’\n’);<br>        printf(“格式不对，请再次输入：”);<br>        a&#x3D;scanf(“%d”,&amp;b);<br>    }<br>    return b;<br>}</p><p>int choice()                 &#x2F;&#x2F;菜单选择<br>{<br>    int a;<br>    a&#x3D;check();<br>    while(a!&#x3D;1&amp;&amp;a!&#x3D;0)        &#x2F;&#x2F;只输出0或1<br>    {<br>        while(getchar()!&#x3D;’\n’);<br>        printf(“请输入0或1：”);<br>        scanf(“%d”,&amp;a);<br>    }<br>    return a;<br>}</p><h4 id="录入数据模块"><a href="#录入数据模块" class="headerlink" title="录入数据模块"></a>录入数据模块</h4><p>先输入学生人数，课程数目用check函数进行合法性验证。再用calloc函数动态分配结构体内存、数组内存。如果内存申请失败，用语句提示用户，<br>再用exit(0)并退出程序；如果申请成功，for循环录入学生的信息和<br>成绩，用p2储存数组求和的总分。代码如下：<br>void input()               &#x2F;&#x2F;录入学生人数、课程数量、学生信息<br>{<br>    int i,j;<br>    printf(“请输入学生人数：”);<br>   numofstudent&#x3D;check();<br>    printf(“请输入课程数量：”);<br>    numofcourse&#x3D;check();     &#x2F;&#x2F;向系统申请内存<br>    p1&#x3D;(STUDENT *)calloc(numofstudent,sizeof(STUDENT));<br>    p2&#x3D;(int *)calloc(numofstudent,sizeof(int));<br>    if(p1&#x3D;&#x3D;NULL||p2&#x3D;&#x3D;NULL)   &#x2F;&#x2F;内存申请不成功的处理<br>    {<br>        printf(“内存申请不成功，\n”);<br>        printf(“请重新打开程序。\n”);<br>        system(“pause”);     &#x2F;&#x2F;暂停在该界面<br>        exit(0);             &#x2F;&#x2F;退出程序<br>    }<br>    for(i&#x3D;0 ; i&lt;numofstudent ; i++)<br>    {<br>        printf(“请输入第%d位学生信息：\n”,i+1);<br>        printf(“姓名：”);<br>       scanf(“%s”,p1[i].name);<br>        printf(“学号：”);<br>       scanf(“%d”,&amp;p1[i].num);<br>        for(j&#x3D;0 ; j&lt;numofcourse ; j++)<br>        {<br>            printf(“第%d门课程成绩：”,j+1);<br>            p1[i].score[j]&#x3D;check();<br>            p2[i]+&#x3D;p1[i].score[j];<br>        }                    &#x2F;&#x2F;p2求一个学生的总分<br>    putchar(‘\n’);<br>    }<br>}</p><h4 id="输出图表模块"><a href="#输出图表模块" class="headerlink" title="输出图表模块"></a>输出图表模块</h4><p>先定义int型变量abcde作为计数器记录每个分段的人数。再用强制类型转换为double求两位小数的平均数，把abcde存进数组，再用双循环通过数组数据打印成绩统计图表。其中i控制Y轴高度。代码如下：</p><p>void output(STUDENT p1[])    &#x2F;&#x2F;输出成绩统计图表<br>{<br>    int a&#x3D;0,b&#x3D;0,c&#x3D;0,d&#x3D;0,e&#x3D;0; &#x2F;&#x2F;计数器<br>    int i,j;<br>    double k;<br>    for(i&#x3D;0 ; i&lt;numofstudent ; i++)<br>    {<br>       k&#x3D;(double)p2[i]&#x2F;numofcourse;<br>       if(k&gt;&#x3D;0 &amp;&amp; k&lt;60)<br>           a++;<br>       if(k&gt;&#x3D;60 &amp;&amp; k&lt;70)<br>           b++;<br>       if(k&gt;&#x3D;70 &amp;&amp; k&lt;80)<br>           c++;<br>       if(k&gt;&#x3D;80 &amp;&amp; k&lt;90)<br>           d++;<br>       if(k&gt;&#x3D;90 &amp;&amp; k&lt;&#x3D;100)<br>           e++;<br>    }<br>    printf(“成绩统计图表\n\n”);<br>    int arr[5]&#x3D;{a,b,c,d,e};<br>    for (i&#x3D;numofstudent ; i&gt;0 ; –i)<br>    {<br>        for (j&#x3D;0; j&lt;5; j++)  &#x2F;&#x2F;双循环打印图表<br>        {<br>            if(arr[j] &gt;&#x3D; i)<br>                printf(“ I “);<br>            else<br>                printf(“   “);<br>            printf(“ “);<br>        }<br>        putchar(‘\n’);<br>    }<br>    printf(“&lt;60 &lt;70 &lt;80 &lt;90 ≤100\n”);<br>}</p><h4 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h4><p>先创建文件指针，以w+（打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。）形式fopen同目录下txt文件，再重复输出图表模块输出图表输出文件。如文件打开失败，printf(“文件创建失败，请重新打开程序。”);再退出程序。代码如下：</p><p>void wfile(STUDENT p1[])     &#x2F;&#x2F;存入文件<br>{<br>    FILE *fp;                &#x2F;&#x2F;文件指针<br>    fp&#x3D;fopen(“output.txt”,”w+”);<br>    if(fp&#x3D;&#x3D;NULL)             &#x2F;&#x2F;文件打开失败的处理<br>    {<br>        printf(“文件创建失败\n”);<br>        printf(“请重新打开程序。\n”);<br>        system(“pause”);<br>        exit(0);<br>    }<br>    int a&#x3D;0,b&#x3D;0,c&#x3D;0,d&#x3D;0,e&#x3D;0;<br>    int i,j;<br>    double k;<br>    for(i&#x3D;0 ; i&lt;numofstudent ; i++)<br>    {<br>       k&#x3D;(double)p2[i]&#x2F;numofcourse;<br>       if(k&gt;&#x3D;0 &amp;&amp; k&lt;60)<br>           a++;<br>       if(k&gt;&#x3D;60 &amp;&amp; k&lt;70)<br>           b++;<br>       if(k&gt;&#x3D;70 &amp;&amp; k&lt;80)<br>           c++;<br>       if(k&gt;&#x3D;80 &amp;&amp; k&lt;90)<br>           d++;<br>       if(k&gt;&#x3D;90 &amp;&amp; k&lt;&#x3D;100)<br>           e++;<br>    }<br>    fprintf(fp,”成绩统计图表\n\n”);<br>    int arr[5]&#x3D;{a,b,c,d,e};<br>    for (i&#x3D;numofstudent ; i&gt;0 ; –i)<br>    {<br>        for (j&#x3D;0; j&lt;5; j++)<br>        {<br>            if(arr[j] &gt;&#x3D; i)<br>                fprintf(fp,”  I  “);<br>            else<br>                fprintf(fp,”     “);<br>            fprintf(fp,”    “);<br>        }<br>        fprintf(fp,”\n”);<br>    }<br>    fprintf(fp,”&lt;60  &lt;70  &lt;80  &lt;90  ≤100\n”);<br>    fclose(fp);<br>}</p><h4 id="主函数模块"><a href="#主函数模块" class="headerlink" title="主函数模块"></a>主函数模块</h4><p>主函数通过依次调用各函数。用A标记菜单headline()，用switch语句choice函数输入1或0进入两个分支。分支1先system(“cls”); 清屏数字，调用input函数输入信息，然后调用score输出学生总分和平均分，再进行output函数和wfile函数根据学生成绩输出图表。system(“pause”)暂停界面system(“cls”); 清屏，用goto语句回到菜单界面；分支0把动态结构体和动态数组的内存释放，通过exit(0)关闭程序。代码如下：<br>void main()<br>{<br>    A:<br>    headline();<br>    switch(choice())<br>    {<br>    case 1:<br>system(“cls”);<br>    headline();<br>   input();<br>   score(p1);<br>    output(p1);<br>    wfile(p1);<br>    system(“pause”);<br>    system(“cls”);           &#x2F;&#x2F;清屏<br>    goto A;<br>    case 0:<br>    free(p1);               &#x2F;&#x2F;动态结构体内存的释放<br>    free(p2);               &#x2F;&#x2F;动态数组内存的释放<br>    exit(0);<br>    }<br>}</p><h2 id="实训小结-心得及体会"><a href="#实训小结-心得及体会" class="headerlink" title="实训小结(心得及体会)"></a>实训小结(心得及体会)</h2><p>在学习c语言基础语法后我们需要通过项目的训练进行进阶提升，一个小的项目能够使初学者对编程语言掌握的更牢固、进一步熟悉编程的逻辑。通过此次实训，收获颇丰，如对C语言的灵魂——指针有了更深的了解、熟练使用动态内存分配以节省空间等等。<br>我们要熟练掌握循环用来控制显示面板和所调用的函数，结构情绪又便于后期系统的调试与运行，要使用暂停函数system(“pause”);让数据停留，使用函数system(“cls”)实现清屏，综合性非常高，调试阶段遇到了程序的漏洞，更需要对每个数据非常严谨的编写。<br>同时也学会了calloc函数进行动态内存的分配，其优点所在：<br>1.可以动态的申请空间，以便动态确定对象所需要的内存；<br>2.便于储存大型对象，通常情况下栈区的大小容不下过于庞大的对象；<br>3.传递指针比传递整个对象更方便高效；（当然对于一个变量也可以取地址，但是临时变量的地址是不能长久使用的，特别是返回临时变量的地址是大忌）<br>4.同时传递指针可以便于大家共同维护一个空间，指针在传递的过程中，大家都可以修改指针指向的内容，当然要加锁进行保护，这样一处修改，处处修改，否则就要设置全局的变量，大家统一修改使用。</p><h2 id="完整代码展示"><a href="#完整代码展示" class="headerlink" title="完整代码展示"></a>完整代码展示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客</title>
      <link href="/2022/02/08/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/02/08/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-2022-2-8"><a href="#前言-2022-2-8" class="headerlink" title="前言 2022-2-8"></a>前言 2022-2-8</h2><p>欢迎大家来到我的博客，这是基于Hexo框架+Butterfly主题，在GitHub平台上托管我的博客，这种方式不需要定期维护，是个很好的选择。缺点是建立在国外服务器上，网站加载速度会很慢，高清图片很久才能加载出来。在这里会记录博客慢慢维护地变化，附上一张图纪念。(在Butterfly主题配置下，点击出现的爱心和首页文案的循环播放，咱就是说，一整个的爱住。)<br><img src="https://s2.loli.net/2022/02/08/9bKgukqLfU7a8rx.jpg" alt="图片加载失败"><br>做项目去驱动学习是一个很好的学习方式，会遇到很多问题，跌跌撞撞的过程中学到的肯定是记忆深刻的，但也是最有效的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
